#version 430 core
// This code is taken from https://github.com/fede-vaccaro/TerrainEngine-OpenGL and adopted.
// MIT License

// Copyright (c) 2018 Federico Vaccaro

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Define the number of CPs in the output patch
layout(vertices = 3) out;

struct Terrain
{
    vec3 seed;
    int octaves;
    float tessellationMultiplier;
    float amplitude;
    float frequency;
    float power;
    float grassCoverage;
    float ambient;
    float diffuse;
    float shininess;
    float specular;
};

uniform vec3 cameraPos;
uniform Terrain terrain;

in vec3 tcsPosition[];
in vec3 tcsNormal[];
in vec2 tcsTextureCoord[];

out vec3 tesPosition[];
out vec3 tesNormal[];
out vec2 tesTextureCoord[];

const mat2 m = mat2(0.8, -0.6, 0.6, 0.8);

// Dummy random
float random2d(vec2 st)
{
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + terrain.seed.xy)) * 43758.5453123);
}

// Cosine interpolation
float interpolate(float a, float b, float x)
{
    float ft = x * 3.14159265f;
    float f = (1 - cos(ft)) * 0.5;
    return a * (1 - f) + b * f;
}

float interpolatedNoise(float x, float y)
{
    int integer_x = int(floor(x));
    float fractional_x = fract(x);
    int integer_y = int(floor(y));
    float fractional_y = fract(y);
    vec2 randomInput = vec2(integer_x, integer_y);
    float a = random2d(randomInput);
    float b = random2d(randomInput + vec2(1.0, 0.0));
    float c = random2d(randomInput + vec2(0.0, 1.0));
    float d = random2d(randomInput + vec2(1.0, 1.0));

    vec2 w = vec2(fractional_x, fractional_y);

    // We can use cubic interpolation here
    w = w * w * w * (10.0 + w * (-15.0 + 6.0 * w));

    float k0 = a, k1 = b - a, k2 = c - a, k3 = d - c - b + a;

    return k0 + k1 * w.x + k2 * w.y + k3 * w.x * w.y;
}

float perlin(float x, float y)
{
    float persistence = 0.5;
    float total = 0.0;
    float frequency = 0.005 * terrain.frequency;
    float amplitude = terrain.amplitude;

    for (int i = 0; i < terrain.octaves; i++)
    {
        frequency *= 2.;
        amplitude *= persistence;
        total += interpolatedNoise(x * frequency, y * frequency) * amplitude;
    }

    return pow(total, terrain.power);
}

float perlin(vec2 st)
{
    float persistence = 0.5;
    float total = 0.0;
    float frequency = 0.005 * terrain.frequency;
    float amplitude = terrain.amplitude;
    for (int i = 0; i < terrain.octaves; ++i)
    {
        frequency *= 2.0;
        amplitude *= persistence;
        vec2 v = frequency * m * st;
        total += interpolatedNoise(v.x, v.y) * amplitude;
    }

    return pow(total, terrain.power);
}

float getTessellationLevel(float distance0, float distance1)
{
    float averageDistance = (distance0 + distance1) / 2.0;

    if (averageDistance <= 35.0 * 10.0)
    {
        return 60.0;
    }
    if (averageDistance <= 70.0 * 10.0)
    {
        return 30.0;
    } else if (averageDistance <= 300.0 * 10.0)
    {
        return 10.0;

    } else if (averageDistance <= 1200.0 * 10.0)
    {
        return 2.5;
    } else if (averageDistance <= 3000.0 * 10.0)
    {
        return 1.0;
    } else
    {
        return 1.0;
    }
}

void main()
{
    // Set the control points of the output patch
    tesPosition[gl_InvocationID] = tcsPosition[gl_InvocationID];
    tesNormal[gl_InvocationID] = tcsNormal[gl_InvocationID];
    tesTextureCoord[gl_InvocationID] = tcsTextureCoord[gl_InvocationID];

    // Calculate the distance from the camera to the three control points
    vec3 worldPos1 = vec3(tesPosition[0].x, perlin(tesPosition[0].xz), tesPosition[0].z);
    vec3 worldPos2 = vec3(tesPosition[1].x, perlin(tesPosition[1].xz), tesPosition[1].z);
    vec3 worldPos3 = vec3(tesPosition[2].x, perlin(tesPosition[2].xz), tesPosition[2].z);

    float d0 = distance(cameraPos, worldPos1);
    float d1 = distance(cameraPos, worldPos2);
    float d2 = distance(cameraPos, worldPos3);

    // Calculate the tessellation levels
    gl_TessLevelOuter[0] = terrain.tessellationMultiplier * getTessellationLevel(d1, d2);
    gl_TessLevelOuter[1] = terrain.tessellationMultiplier * getTessellationLevel(d2, d0);
    gl_TessLevelOuter[2] = terrain.tessellationMultiplier * getTessellationLevel(d0, d1);
    gl_TessLevelInner[0] = gl_TessLevelOuter[2];
}
