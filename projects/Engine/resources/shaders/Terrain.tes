#version 430 core
// This code is taken from https://github.com/fede-vaccaro/TerrainEngine-OpenGL and adopted.
// MIT License

// Copyright (c) 2018 Federico Vaccaro

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

layout(triangles, equal_spacing, ccw) in;

struct Terrain
{
    vec3 seed;
    int octaves;
    float tessellationMultiplier;
    float amplitude;
    float frequency;
    float power;
    float grassCoverage;
    float ambient;
    float diffuse;
    float shininess;
    float specular;
};

uniform mat4 VP;
uniform vec3 cameraPos;
uniform Terrain terrain;

in vec3 tesPosition[];
in vec3 tesNormal[];
in vec2 tesTextureCoord[];

out vec3 fsWorldPosition;
out vec2 fsTextureCoord;
out vec3 fsNormal;
out float fsDistanceFromPosition;
out float fsHeight;

const mat2 m = mat2(0.8, -0.6, 0.6, 0.8);

float noise(int ind, int x, int y)
{
    const int primes[39] = int[39](995615039,
                                   600173719,
                                   701464987,
                                   831731269,
                                   162318869,
                                   136250887,
                                   174329291,
                                   946737083,
                                   245679977,
                                   362489573,
                                   795918041,
                                   350777237,
                                   457025711,
                                   880830799,
                                   909678923,
                                   787070341,
                                   177340217,
                                   593320781,
                                   405493717,
                                   291031019,
                                   391950901,
                                   458904767,
                                   676625681,
                                   424452397,
                                   531736441,
                                   939683957,
                                   810651871,
                                   997169939,
                                   842027887,
                                   423882827,
                                   192405871,
                                   129403928,
                                   102948294,
                                   102948203,
                                   912030912,
                                   910204948,
                                   958730910,
                                   759204855,
                                   859302983);

    int n = x + y * 57;
    n = (n << 13) ^ n;
    int a = primes[ind * 3], b = primes[ind * 3 + 1], c = primes[ind * 3 + 2];
    int t = (n * (n * n * a + b) + c) & 0x7fffffff;
    return float(1.0 - t / 1073741824.0);
}

vec2 interpolate2d(vec2 v0, vec2 v1, vec2 v2)
{
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3d(vec3 v0, vec3 v1, vec3 v2)
{
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}

// Dummy random
float random2d(vec2 st)
{
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233) + terrain.seed.xy)) * 43758.5453123);
}

// Cosine interpolation
float interpolate(float a, float b, float x)
{
    float ft = x * 3.14159265f;
    float f = (1 - cos(ft)) * 0.5;
    return a * (1 - f) + b * f;
}

float interpolatedNoise(float x, float y)
{
    int integer_x = int(floor(x));
    float fractional_x = fract(x);
    int integer_y = int(floor(y));
    float fractional_y = fract(y);
    vec2 randomInput = vec2(integer_x, integer_y);
    float a = random2d(randomInput);
    float b = random2d(randomInput + vec2(1.0, 0.0));
    float c = random2d(randomInput + vec2(0.0, 1.0));
    float d = random2d(randomInput + vec2(1.0, 1.0));

    vec2 w = vec2(fractional_x, fractional_y);

    // We can use cubic interpolation here
    w = w * w * w * (10.0 + w * (-15.0 + 6.0 * w));

    float k0 = a, k1 = b - a, k2 = c - a, k3 = d - c - b + a;

    return k0 + k1 * w.x + k2 * w.y + k3 * w.x * w.y;
}

float perlin(float x, float y)
{
    float persistence = 0.5;
    float total = 0;
    float frequency = 0.005 * terrain.frequency;
    float amplitude = terrain.amplitude;
    for (int i = 0; i < terrain.octaves; ++i)
    {
        frequency *= 2.0;
        amplitude *= persistence;
        total += interpolatedNoise(x * frequency, y * frequency) * amplitude;
    }
    return pow(total, terrain.power);
}

float perlin(vec2 st)
{
    float persistence = 0.5;
    float total = 0.0;
    float frequency = 0.005 * terrain.frequency;
    float amplitude = terrain.amplitude;
    for (int i = 0; i < terrain.octaves; ++i)
    {
        frequency *= 2.0;
        amplitude *= persistence;
        vec2 v = frequency * m * st;
        total += interpolatedNoise(v.x, v.y) * amplitude;
    }

    return pow(total, terrain.power);
}

void main()
{
    // Interpolate the attributes of the output vertex using the barycentric coordinates
    fsTextureCoord = interpolate2d(tesTextureCoord[0], tesTextureCoord[1], tesTextureCoord[2]);
    fsNormal = interpolate3d(tesNormal[0], tesNormal[1], tesNormal[2]);
    fsNormal = normalize(fsNormal);
    fsWorldPosition = interpolate3d(tesPosition[0], tesPosition[1], tesPosition[2]);

    // Displace the vertex along the normal
    float displacement = perlin(fsWorldPosition.xz);
    fsWorldPosition += fsNormal * displacement;
    fsDistanceFromPosition = distance(fsWorldPosition, cameraPos);
    fsHeight = fsWorldPosition.y;

//    gl_ClipDistance[0] = dot(clipPlane, vec4(fsWorldPosition, 1.0));
    gl_Position = VP * vec4(fsWorldPosition, 1.0);
}
